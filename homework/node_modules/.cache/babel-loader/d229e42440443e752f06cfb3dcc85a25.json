{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Usuario\\\\Desktop\\\\ClasesHenry\\\\FT-M2\\\\06-React-Intro\\\\homework\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './App.css';\nimport Cards from './components/Cards.jsx';\nimport { useState } from 'react';\nimport Nav from './components/Nav';\nimport { Route } from 'react-router';\nimport City from './components/City';\nimport About from './components/About';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [cities, setCities] = useState([]); //cities = [];\n  //setCities(estado_anterior => [...estado_anterior, city])\n  //cities =[city];\n\n  function onSearch(city) {\n    const apiKey = '4ae2636d8dfbdc3044bede63951a019b';\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`).then(ans => ans.json()).then(recurso => {\n      let cityExists = cities.some(city => city.id === recurso.id);\n\n      if (cityExists) {\n        alert('Parece que ya has añadido esta ciudad');\n      } else if (recurso.main !== undefined) {\n        const ciudad = {\n          min: Math.round(recurso.main.temp_min),\n          max: Math.round(recurso.main.temp_max),\n          img: recurso.weather[0].icon,\n          id: recurso.id,\n          wind: recurso.wind.speed,\n          temp: recurso.main.temp,\n          name: recurso.name,\n          weather: recurso.weather[0].main,\n          clouds: recurso.clouds.all,\n          latitud: recurso.coord.lat,\n          longitud: recurso.coord.lon\n        };\n        setCities(oldCities => [...oldCities, ciudad]);\n      } else {\n        alert(\"Ciudad no encontrada\");\n      }\n    });\n  }\n\n  function onClose(id) {\n    //cities = [{arreglo de objetos}]\n    setCities(city => city.filter(city => city.id !== id));\n  }\n\n  function onFilter(ciudadId) {\n    let ciudad = cities.filter(c => c.id === parseInt(ciudadId));\n\n    if (ciudad.length > 0) {\n      return ciudad[0];\n    } else {\n      return null;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      children: /*#__PURE__*/_jsxDEV(Nav, {\n        onSearch: onSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      exact: true,\n      children: /*#__PURE__*/_jsxDEV(Cards, {\n        cities: cities,\n        onClose: onClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/about\",\n      exact: true,\n      component: About\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/city/:cityId\",\n      exact: true,\n      render: ({\n        match\n      }) => /*#__PURE__*/_jsxDEV(City, {\n        city: onFilter(match.params.cityId)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 62\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n} // function App() {\n//   return (\n//     <div className=\"App\">\n//     <div className={styles.container}>\n//       <h1>Weather App</h1>\n//       {/* <div>\n//         <Card\n//           max={Cairns.main.temp_max}\n//           min={Cairns.main.temp_min}\n//           name={Cairns.name}\n//           img={Cairns.weather[0].icon}\n//           onClose={() => alert(Cairns.name)}\n//         />\n//       </div> */}\n//         <div className={styles.searchBar}>\n//           <SearchBar\n//             onSearch={(ciudad) => alert(ciudad)}\n//           />\n//         </div>\n//       </div>\n//       <div>\n//         <Cards\n//           cities={data}\n//         />\n//       </div>\n//       <hr />\n//     </div>\n//   );\n// }\n// export default App;\n\n_s(App, \"f1nPJs+hrTaAy6BEqAnKgJLvJt4=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Usuario/Desktop/ClasesHenry/FT-M2/06-React-Intro/homework/src/App.js"],"names":["React","Cards","useState","Nav","Route","City","About","App","cities","setCities","onSearch","city","apiKey","fetch","then","ans","json","recurso","cityExists","some","id","alert","main","undefined","ciudad","min","Math","round","temp_min","max","temp_max","img","weather","icon","wind","speed","temp","name","clouds","all","latitud","coord","lat","longitud","lon","oldCities","onClose","filter","onFilter","ciudadId","c","parseInt","length","match","params","cityId"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport Cards from './components/Cards.jsx';\r\nimport { useState } from 'react';\r\nimport Nav from './components/Nav';\r\nimport { Route } from 'react-router';\r\nimport City from './components/City';\r\nimport About from './components/About';\r\n\r\n\r\nexport default function App() {\r\n\r\n  const [cities, setCities] = useState([]);\r\n  //cities = [];\r\n    //setCities(estado_anterior => [...estado_anterior, city])\r\n    //cities =[city];\r\n\r\n  function onSearch(city){\r\n    const apiKey = '4ae2636d8dfbdc3044bede63951a019b';\r\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`)\r\n      .then(ans => ans.json())\r\n      .then((recurso) => {\r\n\r\n        let cityExists = cities.some(city => city.id === recurso.id);\r\n\r\n        if(cityExists){\r\n          alert('Parece que ya has añadido esta ciudad')\r\n        } else if(recurso.main !== undefined){\r\n          const ciudad = {\r\n            min: Math.round(recurso.main.temp_min),\r\n            max: Math.round(recurso.main.temp_max),\r\n            img: recurso.weather[0].icon,\r\n            id: recurso.id,\r\n            wind: recurso.wind.speed,\r\n            temp: recurso.main.temp,\r\n            name: recurso.name,\r\n            weather: recurso.weather[0].main,\r\n            clouds: recurso.clouds.all,\r\n            latitud: recurso.coord.lat,\r\n            longitud: recurso.coord.lon\r\n          };\r\n          setCities(oldCities => [...oldCities, ciudad]);\r\n        } else {\r\n          alert(\"Ciudad no encontrada\");\r\n        }\r\n\r\n      });\r\n  }\r\n  function onClose(id){\r\n    //cities = [{arreglo de objetos}]\r\n    setCities(city => city.filter(city => city.id !== id))\r\n\r\n  }\r\n  function onFilter(ciudadId) {\r\n    let ciudad = cities.filter(c => c.id === parseInt(ciudadId));\r\n    if(ciudad.length > 0) {\r\n        return ciudad[0];\r\n    } else {\r\n        return null;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path='/' >\r\n        <Nav onSearch={onSearch}/>\r\n      </Route>\r\n      <Route path='/' exact>\r\n      <Cards\r\n          cities={cities}\r\n          onClose={onClose}\r\n        />\r\n      </Route>\r\n      <Route path='/about' exact component={About} />\r\n      <Route path='/city/:cityId' exact render={({match}) => <City city={onFilter(match.params.cityId)}/>} />\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// function App() {\r\n//   return (\r\n    \r\n//     <div className=\"App\">\r\n//     <div className={styles.container}>\r\n//       <h1>Weather App</h1>\r\n//       {/* <div>\r\n//         <Card\r\n//           max={Cairns.main.temp_max}\r\n//           min={Cairns.main.temp_min}\r\n//           name={Cairns.name}\r\n//           img={Cairns.weather[0].icon}\r\n//           onClose={() => alert(Cairns.name)}\r\n//         />\r\n//       </div> */}\r\n//         <div className={styles.searchBar}>\r\n//           <SearchBar\r\n//             onSearch={(ciudad) => alert(ciudad)}\r\n//           />\r\n//         </div>\r\n//       </div>\r\n\r\n//       <div>\r\n//         <Cards\r\n//           cities={data}\r\n//         />\r\n//       </div>\r\n//       <hr />\r\n\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n"]},"metadata":{},"sourceType":"module"}